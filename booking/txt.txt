from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.mail import EmailMessage
from django.db.models import Count, Q, F
from django.http import HttpResponse
from django.template.loader import render_to_string
from io import BytesIO
import pdfkit
import os
from .models import Bus, Route, Booking, Ticket
from .forms import BookingForm
from django.http import JsonResponse
from booking.models import User

# Home Page
def home(request):
    buses = Bus.objects.all()
    routes = Route.objects.all()
    return render(request, 'booking/home.html', {'buses': buses, 'routes': routes})

# Seat Selection (Now Fetching Dynamic Seat Layout)
@login_required
def seat_selection(request, bus_id):
    bus = Bus.objects.get(id=bus_id)
    
    # Fetch already booked seats
    booked_seats = Booking.objects.filter(bus=bus).values_list("seat_number", flat=True)
    
    # Dynamic Seat Layout
    seat_layout = []
    seat_number = 1
    rows = 10  # Adjust based on your bus layout
    cols = 5

    for row in range(rows):
        row_layout = []
        for col in range(cols):
            if seat_number <= 49:  # Ensure seat count is within limit
                row_layout.append({
                    "seat_number": seat_number,
                    "status": "booked" if seat_number in booked_seats else "available"
                })
                seat_number += 1
        seat_layout.append(row_layout)
    
    return render(request, "booking/seat_selection.html", {"bus": bus, "seat_layout": seat_layout})


# Booking Ticket (Now Requires Authentication)

@login_required
def book_ticket(request, bus_id):
    if request.method == "POST":
        selected_seats = request.POST.getlist("selected_seats[]")
        bus = Bus.objects.get(id=bus_id)

        for seat in selected_seats:
            if not Booking.objects.filter(bus=bus, seat_number=seat).exists():
                Booking.objects.create(user=request.user, bus=bus, seat_number=seat)

        return JsonResponse({"message": "Booking successful!"}, status=200)

    return JsonResponse({"error": "Invalid request"}, status=400)

# Payment Page
@login_required
def payment_page(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)
    return render(request, "booking/payment.html", {"booking": booking})

# Payment Success (Now Sending Email Confirmation)
@login_required
def payment_success(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)

    email = EmailMessage(
        subject="🎟 Bus Ticket Confirmed!",
        body=f"Hello {booking.passenger_name}, your seat {booking.seat_number} is confirmed!",
        to=[booking.email]
    )
    email.send()
    return render(request, "booking/confirmation.html", {"booking": booking})

# Authentication (Signup/Login)
def auth_view(request):
    if request.method == "POST":
        action = request.POST.get("action")
        
        if action == "login":
            username = request.POST["username"]
            password = request.POST["password"]
            user = authenticate(request, username=username, password=password)
            if user:
                login(request, user)
                return redirect("dashboard")
            else:
                messages.error(request, "Invalid username or password")
        
        elif action == "signup":
            username = request.POST["username"]
            email = request.POST["email"]
            password = request.POST["password"]
            if User.objects.filter(username=username).exists():
                messages.error(request, "Username already exists")
            else:
                user = User.objects.create_user(username=username, email=email, password=password)
                user.save()
                login(request, user)
                return redirect("dashboard")
    
    return render(request, "booking/seat_selection.html")

# Dashboard (User's Bookings)
@login_required
def my_bookings(request):
    bookings = Booking.objects.filter(email=request.user.email).order_by("-date")
    return render(request, "booking/dashboard.html", {"bookings": bookings})

# Search Buses (Fixed Booking Count)
def search_buses(request):
    date = request.GET.get("date")
    source = request.GET.get("source")
    destination = request.GET.get("destination")

    buses = Bus.objects.filter(
        route__source=source,
        route__destination=destination
    ).annotate(
        booked_seats=Count("booking__seat_number", filter=Q(booking__date=date))  # Fixed incorrect field reference
    ).filter(
        total_seats__gt=F("booked_seats")
    )
    return render(request, "search_results.html", {"buses": buses})

# Booking Confirmation & PDF Generation
@login_required
def booking_confirmation(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)
    
    # Get the ticket for this booking
    ticket = Ticket.objects.filter(booking=booking).first()
    
    if not ticket:
        return HttpResponse("❌ No ticket found for this booking.", status=404)

    #  Generate ticket PDF
    pdf_data = generate_ticket_pdf(booking.id)

    # Send email with PDF attachment
    email_subject = "Bus Ticket Confirmation"
    email_body = f"""
    Dear {booking.passenger_name},

    Your bus ticket has been successfully booked.

    🚌 Bus: {booking.bus.name}
    📍 From: {booking.bus.route.source}
    📍 To: {booking.bus.route.destination}
    📅 Date: {booking.date}
    🎟️ Seat No: {booking.seat_number}

    Please find your ticket attached as a PDF.

    Safe travels! 😊
    """

    email = EmailMessage(
        subject=email_subject,
        body=email_body,
        from_email="your-email@example.com",
        to=[booking.email]
    )
    
    email.attach(f"ticket_{booking.id}.pdf", pdf_data, "application/pdf")  
    email.send()

    # Render confirmation page
    return render(request, 'booking/confirmation.html', {'booking': booking, 'ticket': ticket})

# Logout Function
def user_logout(request):
    logout(request)
    return redirect('auth')  # Redirect to the login page or home

# Search Ticket Page
def search_ticket(request):
    return render(request, "search_ticket.html")  # Ensure this template exists

# Generate Ticket PDF (Fixed PDF Generation)
def generate_ticket_pdf(booking_id):
    """Generate and return a PDF ticket for a booking."""
    
    try:
        booking = Booking.objects.get(id=booking_id)
    except Booking.DoesNotExist:
        return HttpResponse("Booking not found", status=404)

    # Render HTML content for the ticket
    html_content = render_to_string("ticket_template.html", {"booking": booking})

    # Ensure wkhtmltopdf is configured properly
    config = pdfkit.configuration(wkhtmltopdf='/usr/local/bin/wkhtmltopdf')

    # Convert HTML to PDF
    pdf_data = pdfkit.from_string(html_content, False, configuration=config)

    return pdf_data

# dashboard
@login_required  # Ensures only logged-in users can access
def dashboard(request):
    return render(request, "booking/dashboard.html")
    -- -- -- -- - -- - - - -- --- - -- - - - - -- - - -- - - -- - ----- -                 ----- ----------- ------------
 ---------------------------------------------------------------------------------------------------------------
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus Seat Booking</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            background: linear-gradient(to right, #4facfe, #00f2fe);
        }
        .seat {
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease-in-out;
            border: 2px solid #ddd;
            position: relative;
            background-color: #4CAF50;
            color: white;
        }
        .seat.booked {
            background-color: #F44336 !important;
            cursor: not-allowed;
        }
        .seat:hover {
            transform: scale(1.1);
        }
        .aisle {
            width: 60px;
            height: 60px;
            visibility: hidden;
        }
        .window-seat {
            border: 2px solid gold;
        }
    </style>
</head>
<body class="bg-black text-white"> 
    <!-- Navbar -->
    <nav class="navbar">
        <div>
            <a href="{% url 'home' %}">Home</a>
            <a href="#">About</a>
            <a href="{% url 'seat_selection' bus.id %}">Booking</a>
            <a href="#">Courier</a>
        </div>
        <div class="footer">
            <a href="#">Help</a>
            <a href="#">Customer Care</a>
        </div>
    </nav>

    <div class="flex items-center justify-center min-h-screen">
        <div class="bg-white shadow-lg rounded-lg p-6 w-full max-w-lg">
            <h2 class="text-2xl font-bold text-center text-gray-800 mb-4">
                {{ bus.name }} ({{ bus.number }}) - Seat Selection
            </h2>

            <div class="flex justify-center mb-4">
                <div class="bg-gray-700 text-white text-center font-bold p-3 w-24 rounded-lg">Driver</div>
            </div>

            <div id="seat-container" class="grid grid-cols-5 gap-3 justify-center">
                <!-- Seats will be dynamically added here -->
            </div>
            
            <div class="mt-4 text-center">
                <button id="book-button" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-700">
                    Book Selected Seats
                </button>
            </div>
        </div>
    </div>

    <script>
        let selectedSeats = [];
        let bookedSeats = {{ booked_seats|safe }}; // Fetch booked seats from Django

        function renderSeats() {
            let seatLayout = {{ seat_layout|safe }}; // Fetch seat layout dynamically
            let container = $('#seat-container');
            container.empty();
            
            seatLayout.forEach(row => {
                row.forEach(seat => {
                    if (seat === 'aisle') {
                        container.append(`<div class='aisle'></div>`);
                    } else if (seat !== '') {
                        let isBooked = bookedSeats.includes(parseInt(seat));
                        let seatClass = isBooked ? 'seat booked' : 'seat';
                        let windowClass = (seat % 5 === 1 || seat % 5 === 4) ? 'window-seat' : '';
                        container.append(`<div class='${seatClass} ${windowClass}' data-seat='${seat}'>${seat}</div>`);
                    }
                });
            });
        }
        
        renderSeats();

        $(document).on("click", ".seat", function() {
            let seatNumber = $(this).data("seat");
            
            if (!$(this).hasClass("booked")) {
                if ($(this).hasClass("bg-green-500")) {
                    $(this).removeClass("bg-green-500").addClass("bg-yellow-500");
                    selectedSeats.push(seatNumber);
                } else {
                    $(this).removeClass("bg-yellow-500").addClass("bg-green-500");
                    selectedSeats = selectedSeats.filter(s => s !== seatNumber);
                }
            }
        });

        $("#book-button").click(function() {
            if (selectedSeats.length === 0) {
                alert("Please select at least one seat.");
                return;
            }

            $.ajax({
                url: "{% url 'book_ticket' bus.id %}",
                method: "POST",
                data: {
                    "selected_seats": selectedSeats,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                success: function(response) {
                    alert("Seats booked successfully!");
                    location.reload();
                },
                error: function(error) {
                    alert("Error booking seats. Try again.");
                }
            });
        });
    </script>
</body>
</html>
