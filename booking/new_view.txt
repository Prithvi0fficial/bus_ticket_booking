from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.mail import EmailMessage
from django.db.models import Count, Q, F
from django.http import HttpResponse
from django.template.loader import render_to_string
from django.core.mail import send_mail
from django.conf import settings

from io import BytesIO
import pdfkit
import os
from .models import Bus, Route, Booking, Ticket
from .forms import BookingForm
from django.http import JsonResponse
from booking.models import User
from .models import BusRoute
from .models import RoutePrice
from .models import  RouteStop
import json # Import JSON

from .models import Bus, BusRoute, RouteStop, RoutePrice, Seat, Booking, Ticket, Discount
# Home Page
def home(request):
    buses = Bus.objects.all()
    routes = Route.objects.all()
    return render(request, 'booking/home.html', {'buses': buses, 'routes': routes})

# Seat Selection  --- -- - --------------------------------------------------
import json
from django.shortcuts import render, get_object_or_404
from .models import Bus, RoutePrice, Seat
def seat_selection(request, bus_id):
    bus = get_object_or_404(Bus.objects.select_related('route'), id=bus_id)
    bus.refresh_from_db()  # Ensure latest data from DB

    print(f"Bus ID: {bus.id}, Name: {bus}, Route: {bus.route}, AC: {bus.is_ac}")  # Debugging

    route_price = get_object_or_404(RoutePrice, route=bus.route)
    base_price = route_price.get_price(bus.is_ac)

    # ‚úÖ Use "bookings" instead of "booking"
    booked_seats = list(
        Seat.objects.filter(bus=bus, is_booked=True, booking_seats__is_confirmed=True)
        .values_list("seat_number", flat=True)
    )

    print(f"Booked Seats (Confirmed): {booked_seats}")  # Debugging output

    seat_layout = bus.get_seat_layout() or []

    context = {
        'bus': bus,
        'seat_layout': json.dumps(seat_layout),  # Ensure JSON serialization
        'booked_seats': json.dumps(booked_seats),  # Pass as JSON string
        'seat_price': base_price,
    }

    return render(request, 'booking/seat_selection.html', context)
    
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from django.http import JsonResponse
from django.shortcuts import get_object_or_404
from .models import Bus, Seat

def check_seat_availability(request, bus_id):
    """Check if the selected seats are still available before proceeding."""
    if request.method == "POST":
        selected_seats = request.POST.getlist("selected_seats[]")  # Get selected seats
        bus = get_object_or_404(Bus, id=bus_id)

        # Fetch already booked seats from DB
        booked_seats = set(Seat.objects.filter(bus=bus, is_booked=True).values_list("seat_number", flat=True))

        # Check if any selected seat is already booked
        already_booked = [seat for seat in selected_seats if seat in booked_seats]

        if already_booked:
            return JsonResponse({"status": "error", "message": f"Seats {already_booked} are already booked!"})

        return JsonResponse({"status": "success", "message": "Seats are available!"})

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
from django.http import JsonResponse
from .models import Seat, Bus

def get_booked_seats(request, bus_id):
    bus = get_object_or_404(Bus, id=bus_id)
    booked_seats = list(Seat.objects.filter(bus=bus, is_booked=True).values_list("seat_number", flat=True))
    return JsonResponse({"booked_seats": booked_seats})


#------------------------------------------------------------------------------------------------------------------
# Payment Page
@login_required
def payment_page(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)
    return render(request, "booking/payment.html", {"booking": booking})

# Payment Success (Now Sending Email Confirmation)
def payment_success(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)

    email = EmailMessage(
        subject="Bus Ticket Confirmed!",
        body=f"Hello {booking.passenger_name}, your seat {booking.seat_number} is confirmed!",
        to=[booking.email]
    )
    email.send()
    return render(request, "booking/confirmation.html", {"booking": booking})

# Authentication (Signup/Login)
def auth_view(request):
    if request.method == "POST":
        action = request.POST.get("action")

        if action == "login":
            username = request.POST["username"]
            password = request.POST["password"]
            user = authenticate(request, username=username, password=password)
            if user:
                login(request, user)
                return redirect("dashboard")
            else:
                messages.error(request, "Invalid username or password")

        elif action == "signup":
            username = request.POST["username"]
            email = request.POST["email"]
            password = request.POST["password"]
            if User.objects.filter(username=username).exists():
                messages.error(request, "Username already exists")
            else:
                user = User.objects.create_user(username=username, email=email, password=password)
                user.save()
                login(request, user)
                return redirect("dashboard")

    return render(request, "booking/seat_selection.html")

# Dashboard (User's Bookings)
@login_required
def my_bookings(request):
    bookings = Booking.objects.filter(email=request.user.email).order_by("-date")
    return render(request, "booking/dashboard.html", {"bookings": bookings})

# Search Buses (Fixed Booking Count)
def search_buses(request):
    date = request.GET.get("date")
    source = request.GET.get("source")
    destination = request.GET.get("destination")

    buses = Bus.objects.filter(
        route__source=source,
        route__destination=destination
    ).annotate(
        booked_seats=Count("booking__seat_number", filter=Q(booking__date=date))  # Fixed incorrect field reference
    ).filter(
        total_seats__gt=F("booked_seats")
    )
    return render(request, "search_results.html", {"buses": buses})

# Booking Confirmation & PDF Generation -------------------------------------------------------------------------------
from django.core.mail import EmailMessage
from .models import Booking

from booking.utils import generate_ticket_pdf  # Ensure this function exists


from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse
from django.utils.timezone import now
from django.core.mail import send_mail
from django.conf import settings
from .models import Bus, Seat, Booking, BusRoute

def booking_confirmation(request, bus_id):
    bus = get_object_or_404(Bus, id=bus_id)
    bus_routes = BusRoute.objects.filter(bus=bus)  # Get routes for the selected bus

    
    if request.method == "GET":
        seats = request.GET.get("seats", "")
        price = request.GET.get("price", "")

        return render(request, 'booking/confirmation.html', {
            'bus': bus,
            'bus_id': bus_id,
            'seats': seats,
            'price': price,
            'bus_routes': bus_routes  # Pass routes to the template
        })

    if request.method == "POST":
        starting_point = request.POST.get("starting_point")  # ‚úÖ Get selected starting point
        ending_point = request.POST.get("ending_point")  # ‚úÖ Get selected ending point
        seats = request.POST.get("seats")
        price = request.POST.get("price")
        passenger_name = request.POST.get("passenger_name")
        passenger_age = request.POST.get("passenger_age")
        passenger_email = request.POST.get("passenger_email")

    if not starting_point or not ending_point or not price or not seats or not passenger_name or not passenger_age or not passenger_email:
        return HttpResponse("‚ùå All fields are required!", status=400)

    try:
        price = float(price)
    except ValueError:
        return HttpResponse("‚ùå Invalid price format!", status=400)

    # ‚úÖ No need to fetch BusRoute ID since user selects stop names directly
    route = None
    price = bus.price 

    # ‚úÖ Convert seat IDs to Seat objects
    seat_ids = seats.split(",")
    seat_objects = [get_object_or_404(Seat, id=int(seat_id)) for seat_id in seat_ids]

    # ‚úÖ Check if any seat is already booked
    already_booked = Booking.objects.filter(bus=bus, seats__in=seat_objects).exists()
    if already_booked:
        return HttpResponse("‚ùå One or more selected seats are already booked!", status=400)

    booking = Booking.objects.create(
    bus=bus,
    route=route,  # ‚úÖ No need to fetch a route
    type=bus.type,
    price=price,
    total_price=price,
    date=now(),
    user=request.user,
    passenger_name=passenger_name,
    passenger_age=passenger_age,
    passenger_email=passenger_email,
    starting_point=starting_point,  # ‚úÖ Store selected starting stop
    ending_point=ending_point  # ‚úÖ Store selected ending stop
    )


    print(f"‚úÖ Booking Created: Booking for {passenger_name} on {booking.date}, ID: {booking.id}")

    # ‚úÖ Send email confirmation
    subject = "Your Bus Ticket Confirmation"
    message = f"""
    Hello {passenger_name},

    Your ticket has been successfully booked. Here are the details:

    üöå Bus: {bus.name}
    üõ£Ô∏è Route: {booking.starting_point} ‚Üí {booking.ending_point}
    üéüÔ∏è Seat(s): {seats}
    üí∞ Price: ‚Çπ{price}
    üìÖ Date: {booking.date.strftime('%Y-%m-%d %H:%M')}

    Please keep this email as proof of booking.

    Thank you for choosing our service!

    Regards,
    Bus Ticket Booking Team
    """
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [passenger_email]

    try:
        send_mail(subject, message, from_email, recipient_list)
        print(f"‚úÖ Email sent to {passenger_email}")
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")

    return render(request, 'booking/confirmation.html', {
        'booking': booking,
        'bus': bus,
        'bus_id': bus_id,
        'seats': seats,
        'price': price,
        'date': booking.date
    })

# Logout Function
def user_logout(request):
    logout(request)
    return redirect('auth')  # Redirect to the login page or home

# Search Ticket Page
def search_ticket(request):
    return render(request, "search_ticket.html")  # Ensure this template exists

# Generate Ticket PDF (Fixed PDF Generation)
def generate_ticket_pdf(booking_id):
    """Generate and return a PDF ticket for a booking."""

    try:
        booking = Booking.objects.get(id=booking_id)
    except Booking.DoesNotExist:
        return HttpResponse("Booking not found", status=404)

    # Render HTML content for the ticket
    html_content = render_to_string("confirmation.html", {"booking": booking})

    # Ensure wkhtmltopdf is configured properly
    config = pdfkit.configuration(wkhtmltopdf='/usr/local/bin/wkhtmltopdf')

    # Convert HTML to PDF
    pdf_data = pdfkit.from_string(html_content, False, configuration=config)

    return pdf_data

# dashboard
@login_required  # Ensures only logged-in users can access
def dashboard(request):
    return render(request, "booking/dashboard.html")

# bus_lists
def bus_list(request):
    buses = Bus.objects.select_related('route').all()  # Optimized query
    return render(request, 'booking/bus_list.html', {'buses': buses})
# book_ticket
from django.shortcuts import render, get_object_or_404, redirect
from .models import Bus, Seat
from django.contrib import messages

def book_ticket(request, bus_id):
    if request.method == "POST":
        bus = get_object_or_404(Bus, id=bus_id)
        selected_seats = request.POST.get("selected_seats")

        if not selected_seats:
            messages.error(request, "No seats selected!")
            return redirect("seat_selection", bus_id=bus.id)

        selected_seat_numbers = selected_seats.split(",")

        for seat_number in selected_seat_numbers:
            seat, created = Seat.objects.get_or_create(bus=bus, seat_number=seat_number)
            if seat.is_booked:
                messages.error(request, f"Seat {seat_number} is already booked!")
                return redirect("seat_selection", bus_id=bus.id)
            seat.is_booked = True
            seat.save()

        return redirect(f"/confirmation/{bus.id}/?seats={selected_seats}")

    return redirect("seat_selection", bus_id=bus_id)
#--------------------------------------------------------------------------------------------------------------------


#---------------------------------------------------------------------------------------------------------------------------
